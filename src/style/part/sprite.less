/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@arrow-name: 'arrow';
@arrow-x: 0px;
@arrow-y: 96px;
@arrow-offset-x: 0px;
@arrow-offset-y: -96px;
@arrow-width: 28px;
@arrow-height: 24px;
@arrow-total-width: 135px;
@arrow-total-height: 120px;
@arrow-image: '../img/sprite.png';
@arrow: 0px 96px 0px -96px 28px 24px 135px 120px '../img/sprite.png' 'arrow';
@facebook-name: 'facebook';
@facebook-x: 111px;
@facebook-y: 38px;
@facebook-offset-x: -111px;
@facebook-offset-y: -38px;
@facebook-width: 19px;
@facebook-height: 35px;
@facebook-total-width: 135px;
@facebook-total-height: 120px;
@facebook-image: '../img/sprite.png';
@facebook: 111px 38px -111px -38px 19px 35px 135px 120px '../img/sprite.png' 'facebook';
@google-name: 'google';
@google-x: 0px;
@google-y: 60px;
@google-offset-x: 0px;
@google-offset-y: -60px;
@google-width: 37px;
@google-height: 36px;
@google-total-width: 135px;
@google-total-height: 120px;
@google-image: '../img/sprite.png';
@google: 0px 60px 0px -60px 37px 36px 135px 120px '../img/sprite.png' 'google';
@menu-name: 'menu';
@menu-x: 60px;
@menu-y: 0px;
@menu-offset-x: -60px;
@menu-offset-y: 0px;
@menu-width: 51px;
@menu-height: 44px;
@menu-total-width: 135px;
@menu-total-height: 120px;
@menu-image: '../img/sprite.png';
@menu: 60px 0px -60px 0px 51px 44px 135px 120px '../img/sprite.png' 'menu';
@ok-name: 'ok';
@ok-x: 111px;
@ok-y: 0px;
@ok-offset-x: -111px;
@ok-offset-y: 0px;
@ok-width: 24px;
@ok-height: 38px;
@ok-total-width: 135px;
@ok-total-height: 120px;
@ok-image: '../img/sprite.png';
@ok: 111px 0px -111px 0px 24px 38px 135px 120px '../img/sprite.png' 'ok';
@phone-name: 'phone';
@phone-x: 0px;
@phone-y: 0px;
@phone-offset-x: 0px;
@phone-offset-y: 0px;
@phone-width: 60px;
@phone-height: 60px;
@phone-total-width: 135px;
@phone-total-height: 120px;
@phone-image: '../img/sprite.png';
@phone: 0px 0px 0px 0px 60px 60px 135px 120px '../img/sprite.png' 'phone';
@sm-name: 'sm';
@sm-x: 111px;
@sm-y: 73px;
@sm-offset-x: -111px;
@sm-offset-y: -73px;
@sm-width: 16px;
@sm-height: 16px;
@sm-total-width: 135px;
@sm-total-height: 120px;
@sm-image: '../img/sprite.png';
@sm: 111px 73px -111px -73px 16px 16px 135px 120px '../img/sprite.png' 'sm';
@vk-name: 'vk';
@vk-x: 37px;
@vk-y: 60px;
@vk-offset-x: -37px;
@vk-offset-y: -60px;
@vk-width: 35px;
@vk-height: 20px;
@vk-total-width: 135px;
@vk-total-height: 120px;
@vk-image: '../img/sprite.png';
@vk: 37px 60px -37px -60px 35px 20px 135px 120px '../img/sprite.png' 'vk';
@spritesheet-width: 135px;
@spritesheet-height: 120px;
@spritesheet-image: '../img/sprite.png';
@spritesheet-sprites: @arrow @facebook @google @menu @ok @phone @sm @vk;
@spritesheet: 135px 120px '../img/sprite.png' @spritesheet-sprites;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: e(extract(@sprite, 10));
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}
